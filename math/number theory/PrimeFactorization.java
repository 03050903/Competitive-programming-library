package math.number_theory;

import java.util.ArrayList;

public class PrimeFactorization {

	static ArrayList<Integer> primes;					// generated by sieve
	
	/*
	 * 1. Generating a list of prime factors
	 */	
	static ArrayList<Integer> primeFactors(int N)		// O(sqrt(N) / ln sqrt(N))
	{
		ArrayList<Integer> factors = new ArrayList<Integer>();
		int idx = 0, p = primes.get(idx);
		
		while(p * p <= N)
		{
			while(N % p == 0) { factors.add(p); N /= p; }
			p = primes.get(++idx);
		}
		
		if(N != 1)						// last prime factor may be > sqrt(N)
			factors.add(N);
		return factors;
	}
}
